<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie-edge">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/particle-api-js/5/particle.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
  <title>My Chart.js Chart</title>
</head>
<body>
  <div class="container">
    <canvas id="myChart"></canvas>
  </div>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToHour()">Show Weight Past Hour</button>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToDay()">Show Weight Past Day</button>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToWeek()">Show Weight Past Week</button>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToMonth()">Show Weight Past Month</button>
   <button type="button" class="btn btn-primary btn-lg" onclick="ToggleLive()">Toggle Live Refresh</button>
   <p style = "font-size:18px"; id="LiveToggleText">Live Data: On</p>
   <p style = "font-size:18px"; id="TimeScaleText">Showing Weights for Past: Hour</p>
  <script>
    var isRefreshingLive = true;
    /* Particle Section
     *
     */
    //var Particle = require('particle-api-js');
    var particle = new Particle();
    var token;

    // Particle Login
    particle.login({username: 'ko.wing.bird@gmail.com', password: 'qaz123QAZ'}).then(
      function(data) {
        token = data.body.access_token;
        //window.alert(token)
      },
      function (err) {
        console.log('Could not log in.', err);
      }
    );

	
	const MS_IN_AN_HOUR = 3600000;
	const MS_IN_A_DAY = 86400000;
	const MS_IN_A_WEEK = 604800000;
	const MS_IN_A_MONTH = 2628000000;
	
	const AXES_BUFFER = 1000;
	
    const MAX_DATA_POINTS = 0;

    // Data arrays
    /* displayedTimes and displayedWeights weights are hooked to the graph.
       Changing them will automatically show on the graph.
    */
    var displayedTimes = []; // Time at which weight was recorded
    var displayedWeights = []; // Recorded weights

    // These are the buffers that will hold the perch data before they are displayed to the graph
    var storedTimes = [];
    var storedWeights = [];
	
	var windowMinimum;
	var windowMaximum;

    // Initialize data arrays
    for (i = 0; i < MAX_DATA_POINTS; i++)
    {
      displayedWeights.push(0);
      displayedTimes.push("");

      storedTimes.push(0);
      storedWeights.push("");
    }
   
    /* Chart Code
     *
     */
    let myChart = document.getElementById('myChart').getContext('2d');

    //Global options
    Chart.defaults.global.defaultFontFamily = 'Ariel';
    Chart.defaults.global.defaultFontSize = 18;

    var weightChart = new Chart(myChart, {
      // Graph Type
      type: 'line', // Types: bar, horizontalBar, pie, line, doughnut, radar, polarArea

      // Data Displayed
      data:{
        // x axis names
        labels:displayedTimes, // Array type
        datasets:[{
          label:'Weight',
          // y axis values for each x axis label
          data:displayedWeights,
          backgroundColor:'rgba(66, 134, 244, .3)', // Color of line data, light blue
          borderWidth:1, // Width of each weight node
          borderColor:'#777',
          hoverBorderWidth:3,
          hoverBorderColor:'#000'
        }]
      },

      // Graph Auxillary Options - title, legend, etc.
      options:{
        title:{
          display:true,
          text:'Bird Weight in Grams',
          fontSize:25,
          fontFamily: "Courier New"
        },
        legend:{
          //position:'right',
          display:false,
          labels:{
            fontColor:'#000'
          }
        },
        scales: {
                xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Time'
                        },
                        fontFamily: 'Courier New'
                    }],
                yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Weight'
                        },
                        fontFamily: 'Courier New',
                        ticks: {
                            beginAtZero: true,
                            steps: 40,
                            stepSize: 1000,
                            min: -60000,
                            max: 60000
                        }
                    }]
            },
        layout:{

        }
      }
    });

	
	/* Requests previous weight data from server.
	   1 Hour = 3,600,000 ms
	   1 Day = 86,400,000 ms
	   1 Week = 604,800,000 ms
	   1 Month = 2,628,000,000 ms
	*/ 	
	let nowTime = new Date();
	var nowMs = nowTime.getTime();
	var pastDayMs = nowMs - MS_IN_A_WEEK;
	
	var xhttp = new XMLHttpRequest();
	var response;
	
    xhttp.open("GET", "http://localhost:3000/api/past/"+pastDayMs.toString()+ "/" +nowMs.toString(), true);
    //xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.send();
    xhttp.addEventListener("readystatechange", processRequest, false);
    function processRequest(e) 
	{
       if (xhttp.readyState == 4 && xhttp.status == 200) 
	   {
           response = JSON.parse(xhttp.responseText);
           console.log(response[0].time);

           // response structure: _id, userid, time, value
		   for (var r in response)
		   {
		       // Time display
			   var date = new Date(response[r].time);
               var month = date.getMonth();
               var day = date.getDate();
               var hour = date.getHours();
               var minute = date.getMinutes(); 
               if (minute < 10)
               {
			       minute = "0"+minute;
			   }	
			   var second = date.getSeconds();			   
               if (second < 10)
               {
			       second = "0"+second;
			   }				  
               var amPm;
               if (hour >= 12)
               {
			       hour = 12 - (24 - hour);
			       amPm = "PM";
			   }			   
			   else
			   {
			       amPm = "AM";
			   }
               var displayedDate = month+"/"+day+"  "+hour+":"+minute+":"+second+amPm;			   
		       displayedTimes.push(displayedDate);
			   
			   // Weight display
		       displayedWeights.push(response[r].value);
		   }
       }
	   
	   // Changes graph scale depending on currently displayed data
	   weightChart.config.options.scales.yAxes[0].ticks.min = 
	       Math.round((Math.min.apply(null, displayedWeights) - AXES_BUFFER)/1000)*1000;
   	   weightChart.config.options.scales.yAxes[0].ticks.max = 
	       Math.round((Math.max.apply(null, displayedWeights) + AXES_BUFFER)/1000)*1000;

	   weightChart.update();
    }
    // Gets the weight readings periodically from Photon
    /*particle.getEventStream({ deviceId: '360057000351353530373132', auth: '5a495ca3a878380c969a64b0c0dcafbc8099888a' }).then(function(stream) {
      stream.on('event', function(data) {
        console.log("Event: ", data.data);
        console.log("Event time: ", data.published_at);

        if (storedWeights.length == MAX_DATA_POINTS)
        {
          storedWeights.shift();
          storedTimes.shift();
        }

        // Stores perch data into buffers
        storedWeights.push(data.data);
        storedTimes.push(data.published_at);

        if (isRefreshingLive == true)
        {
          // After live data is turned on, the buffered data is updated to the graph
          for (i = 0; i < storedTimes.length; i++)
          {
            if (displayedWeights.length == MAX_DATA_POINTS)
            {
              displayedWeights.shift();
              displayedTimes.shift();

              displayedWeights.push(storedWeights[i]);
              displayedTimes.push(storedTimes[i]);
            }
          }
        }

        weightChart.update();
      });
    });*/

    // Live Toggle Button
    function ToggleLive()
    {
      isRefreshingLive = !isRefreshingLive;
      console.log(isRefreshingLive);

      // Changes Live Data text accordingly
      if (isRefreshingLive == true)
      {
        document.getElementById("LiveToggleText").innerHTML = "Live Data: On";
      }
      else
      {
        document.getElementById("LiveToggleText").innerHTML = "Live Data: Off";
      }
    }
	
	// Changes Time Scale text to reflect current graph time scale
	function ChangeTimeScaleToHour()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights for Past: Hour";
	}
	function ChangeTimeScaleToDay()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights for Past: Day";
	}
	function ChangeTimeScaleToWeek()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights for Past: Week";
	}
	function ChangeTimeScaleToMonth()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights for Past: Month";
	}
  </script>
</body>
</html>
